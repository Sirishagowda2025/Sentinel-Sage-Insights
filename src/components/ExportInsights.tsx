import React, { useState } from 'react';
import { Download, FileText, Mail, Share2, Copy } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { SentimentData, ProcessedData } from '../types';

interface ExportInsightsProps {
  data: SentimentData[];
  processedData: ProcessedData | null;
}

const ExportInsights: React.FC<ExportInsightsProps> = ({ data, processedData }) => {
  const [copied, setCopied] = useState(false);

  const generateInsightsReport = () => {
    const negative = data.filter(d => d.sentiment < -0.1).length;
    const positive = data.filter(d => d.sentiment > 0.1).length;
    const avgSentiment = data.reduce((acc, curr) => acc + curr.sentiment, 0) / data.length;

    return `# SentinelSage AI Sentiment Analysis Report
Generated: ${new Date().toLocaleString()}

## Executive Summary
- **Total Interactions Analyzed:** ${data.length}
- **Average Sentiment Score:** ${avgSentiment.toFixed(2)}
- **Positive Interactions:** ${positive} (${((positive/data.length)*100).toFixed(1)}%)
- **Negative Interactions:** ${negative} (${((negative/data.length)*100).toFixed(1)}%)

## Key Findings
${negative > data.length * 0.3 ? 'ðŸš¨ **High Alert:** Significant negative sentiment detected requiring immediate attention.' : 'âœ… **Status:** Customer sentiment levels are within normal ranges.'}

## Top Issues Detected
${data.filter(d => d.sentiment < -0.3).slice(0, 3).map((item, i) => `${i+1}. ${item.category} - Customer: ${item.customer}`).join('\n')}

## Recommendations
- ${negative > 5 ? 'Implement proactive customer outreach program' : 'Maintain current service quality'}
- ${avgSentiment < -0.2 ? 'Review and enhance support team training' : 'Continue monitoring sentiment trends'}
- Schedule weekly sentiment review meetings with CX team

---
*Report generated by SentinelSage AI - Customer Sentiment Watchdog*`;
  };

  const handleExportCSV = () => {
    const csvContent = [
      ['Timestamp', 'Customer', 'Message', 'Sentiment', 'Channel', 'Agent', 'Category', 'Confidence', 'CSAT Prediction'],
      ...data.map(row => [
        row.timestamp.toISOString(),
        row.customer,
        `"${row.message.replace(/"/g, '""')}"`,
        row.sentiment.toFixed(3),
        row.channel,
        row.agent,
        row.category,
        row.confidence.toFixed(3),
        row.csatPrediction || 3
      ])
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `sentiment-analysis-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleExportMarkdown = () => {
    const report = generateInsightsReport();
    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `sentiment-insights-${new Date().toISOString().split('T')[0]}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleCopyReport = async () => {
    const report = generateInsightsReport();
    try {
      await navigator.clipboard.writeText(report);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const handleEmailReport = () => {
    const subject = `SentinelSage Sentiment Analysis Report - ${new Date().toLocaleDateString()}`;
    const body = generateInsightsReport().replace(/\n/g, '%0D%0A').replace(/#/g, '%23');
    window.open(`mailto:?subject=${encodeURIComponent(subject)}&body=${body}`);
  };

  const handleShare = async () => {
    const report = generateInsightsReport();
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'SentinelSage Sentiment Analysis Report',
          text: report,
        });
      } catch (err) {
        console.error('Error sharing:', err);
      }
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="h-5 w-5" />
          Export & Share Insights
        </CardTitle>
        <CardDescription>
          Export your analysis results and share insights with stakeholders
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Export Options */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <h4 className="font-semibold">Data Export</h4>
              <div className="space-y-2">
                <Button variant="outline" className="w-full justify-start" onClick={handleExportCSV}>
                  <FileText className="h-4 w-4 mr-2" />
                  Export Raw Data (CSV)
                </Button>
                <Button variant="outline" className="w-full justify-start" onClick={handleExportMarkdown}>
                  <Download className="h-4 w-4 mr-2" />
                  Export Insights Report (MD)
                </Button>
              </div>
            </div>

            <div className="space-y-2">
              <h4 className="font-semibold">Share Options</h4>
              <div className="space-y-2">
                <Button 
                  variant="outline" 
                  className="w-full justify-start" 
                  onClick={handleCopyReport}
                >
                  <Copy className="h-4 w-4 mr-2" />
                  {copied ? 'Copied!' : 'Copy Report to Clipboard'}
                </Button>
                <Button variant="outline" className="w-full justify-start" onClick={handleEmailReport}>
                  <Mail className="h-4 w-4 mr-2" />
                  Email Report
                </Button>
                {navigator.share && (
                  <Button variant="outline" className="w-full justify-start" onClick={handleShare}>
                    <Share2 className="h-4 w-4 mr-2" />
                    Share Report
                  </Button>
                )}
              </div>
            </div>
          </div>

          {/* Report Preview */}
          <div className="mt-6">
            <h4 className="font-semibold mb-2">Report Preview</h4>
            <div className="p-4 bg-gray-50 rounded-lg border text-sm max-h-64 overflow-y-auto">
              <pre className="whitespace-pre-wrap font-mono text-xs">
                {generateInsightsReport()}
              </pre>
            </div>
          </div>

          {/* Export Summary */}
          <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
            <div className="text-sm">
              <strong>Ready to Export:</strong>
              <ul className="mt-1 text-xs text-gray-600">
                <li>â€¢ {data.length} analyzed interactions</li>
                <li>â€¢ {processedData ? processedData.topIssues.length : 0} identified issue categories</li>
                <li>â€¢ AI-generated insights and recommendations</li>
                <li>â€¢ Sentiment distribution and trends</li>
              </ul>
            </div>
          </div>

          <div className="text-center text-xs text-gray-500">
            ðŸ“Š All exports include AI confidence scores and timestamps for audit trails
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default ExportInsights;